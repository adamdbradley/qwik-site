const QwikLoader = "!function(){const e=(t,n,o,s,r)=>(void 0===o?n?(s=n.getAttribute(\"q:base\"),r=e(t,n.parentNode&&n.parentNode.closest(\"[q\\\\:base]\"))):s=t.baseURI:o&&(s=o,r=e(t,n.closest(\"[q\\\\:base]\"))),s?new URL(s,r):void 0);((t,n)=>{const o=\"__q_context__\",s=[\"on:\",\"on-window:\",\"on-document:\"],r=async(e,n,o)=>{n=n.replace(/([A-Z])/g,(e=>\"-\"+e.toLowerCase())),t.querySelectorAll(\"[on\"+e+\"\\\\:\"+n+\"]\").forEach((e=>a(e,n,o)))},a=async(n,r,a,i,d)=>{for(const l of s)if(i=e(t,n,n.getAttribute(l+r))){const e=c(i,window[i.pathname]||await import((i+\"\").split(\"#\")[0]));d=document[o];try{document[o]=[n,a,i],e(n,a,i)}finally{document[o]=d}}},c=(e,t,n)=>t[n=e.hash.replace(/^#?([^?[|]*).*$/,\"$1\")||\"default\"]||(e=>{throw Error(\"QWIK: \"+e)})(e+\" does not export \"+n),i=async(e,n)=>{if((n=e.target)==t)setTimeout((()=>r(\"-document\",e.type,e)));else for(;n&&n.getAttribute;)a(n,e.type,e),n=e.bubbles?n.parentElement:null},d=e=>t.addEventListener(e,i,{capture:!0}),l=e=>{e=t.readyState,n||\"interactive\"!=e&&\"complete\"!=e||(n=1,r(\"\",\"q-init\",new CustomEvent(\"qInit\")))};{const e=t.querySelector(\"script[events]\");if(e)(e.getAttribute(\"events\")||\"\").split(/[\\s,;]+/).forEach(d);else for(const e in t)0==e.indexOf(\"on\")&&d(e.substring(2))}t.addEventListener(\"readystatechange\",l),l()})(document)}();";
const QwikLoaderDebug = "!function() {\n    const qrlResolver = (doc, element, eventUrl, _url, _base) => {\n        if (void 0 === eventUrl) {\n            if (element) {\n                _url = element.getAttribute(\"q:base\");\n                _base = qrlResolver(doc, element.parentNode && element.parentNode.closest(\"[q\\\\:base]\"));\n            } else {\n                _url = doc.baseURI;\n            }\n        } else if (eventUrl) {\n            _url = eventUrl;\n            _base = qrlResolver(doc, element.closest(\"[q\\\\:base]\"));\n        }\n        return _url ? new URL(_url, _base) : void 0;\n    };\n    ((doc, hasInitialized) => {\n        const ON_PREFIXES = [ \"on:\", \"on-window:\", \"on-document:\" ];\n        const broadcast = async (infix, type, event) => {\n            type = type.replace(/([A-Z])/g, (a => \"-\" + a.toLowerCase()));\n            doc.querySelectorAll(\"[on\" + infix + \"\\\\:\" + type + \"]\").forEach((target => dispatch(target, type, event)));\n        };\n        const dispatch = async (element, eventName, ev, url, previousCtx) => {\n            for (const on of ON_PREFIXES) {\n                if (url = qrlResolver(doc, element, element.getAttribute(on + eventName))) {\n                    const handler = getModuleExport(url, window[url.pathname] || await import(String(url).split(\"#\")[0]));\n                    previousCtx = document.__q_context__;\n                    try {\n                        document.__q_context__ = [ element, ev, url ];\n                        handler(element, ev, url);\n                    } finally {\n                        document.__q_context__ = previousCtx;\n                    }\n                }\n            }\n        };\n        const getModuleExport = (url, module, exportName) => module[exportName = url.hash.replace(/^#?([^?[|]*).*$/, \"$1\") || \"default\"] || (msg => {\n            throw new Error(\"QWIK: \" + msg);\n        })(url + \" does not export \" + exportName);\n        const processEvent = async (ev, element) => {\n            if ((element = ev.target) == doc) {\n                setTimeout((() => broadcast(\"-document\", ev.type, ev)));\n            } else {\n                while (element && element.getAttribute) {\n                    dispatch(element, ev.type, ev);\n                    element = ev.bubbles ? element.parentElement : null;\n                }\n            }\n        };\n        const addEventListener = eventName => doc.addEventListener(eventName, processEvent, {\n            capture: !0\n        });\n        const processReadyStateChange = readyState => {\n            readyState = doc.readyState;\n            if (!hasInitialized && (\"interactive\" == readyState || \"complete\" == readyState)) {\n                hasInitialized = 1;\n                broadcast(\"\", \"q-init\", new CustomEvent(\"qInit\"));\n            }\n        };\n        {\n            const scriptTag = doc.querySelector(\"script[events]\");\n            if (scriptTag) {\n                (scriptTag.getAttribute(\"events\") || \"\").split(/[\\s,;]+/).forEach(addEventListener);\n            } else {\n                for (const key in doc) {\n                    if (0 == key.indexOf(\"on\")) {\n                        addEventListener(key.substring(2));\n                    }\n                }\n            }\n        }\n        doc.addEventListener(\"readystatechange\", processReadyStateChange);\n        processReadyStateChange();\n    })(document);\n}();";
export { QwikLoader, QwikLoaderDebug };
